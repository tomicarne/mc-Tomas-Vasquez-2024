# -*- coding: utf-8 -*-
"""taller 24.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FyqR3QxM5h5tZCDLxKwPeUYIpswb0QpB
"""

import copy
from re import S
import matplotlib.pyplot as plt
import numpy as np
import math
from sklearn.linear_model import LinearRegression

def mul_pol(a,b):
  lon = len(a) + len(b) -1
  res = [0] * lon

  for i in range(len(a)):
    for j in range(len(b)):
      res[i+j] += a[i] *b[j]
  return res

def imp_pol(p):
  tex = "f(x)="
  gra = len(p)-1
  for i in range(len(p)):
    if p[i] != 0 :
      if i > 0 and p[i] >= 0:
        tex += "+"

    tex += str(round(p[i],6))

    if gra == 0:
      tex += "x"
    elif gra > 1:
      tex += "x^" + str(gra)



    gra -= 1
  print(tex)

#x=2.75
X = [1, 2, 3, 4, 5]
Y = [2, 1.8, -2, -4.6, 3.6]
n = len(X)

pol =[0] * n
#programita
for i in range(n):
  num = [1]
  den = 1
  for j in range(n):
    if j != i:
      num =mul_pol(num,[1,-X[j]])
      den *= X[i] - X[j]
  lixfx1 =[]
  for k in range(len(num)):
    lixfx1.append(num[k]/den* Y[i])

  for l in range(len(lixfx1)):
    pol[l] += lixfx1[l]

print(pol)
imp_pol(pol)



# Print the resulting polynomial
pol =len(num) * len(Y) -1
print(pol)