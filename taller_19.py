# -*- coding: utf-8 -*-
"""taller_19.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_HlEIZ-rm5PvhXkQuHxFk79hNEgC60wG
"""

import matplotlib.pyplot as plt
import numpy as np
import math
from sklearn.linear_model import LinearRegression
# Create some fake data for two variables: x and y
X = [1, 2, 3, 4, 5, 6, 7, 8]
Y = [4.3, 6.5, 7.5, 8, 8.5, 8.8, 9, 9.5]


n = len(X)
m = len(Y)
# Plot the data to see the relationship between x and y
plt.scatter(X, Y)
plt.show()
suma_x = suma_y = suma_xy = suma_x2 = 0
suma_x_ep = suma_y_ep = suma_xy_ep = suma_x2_ep = 0
suma_x_ra = suma_y_ra = suma_xy_ra = suma_x2_ra = 0
suma_x_ex = suma_y_ex = suma_xy_ex = suma_x2_ex = 0

for r in range(n):
    suma_x = suma_x + X[r]
    suma_y = suma_y + Y[r]
    suma_xy = suma_xy + X[r] * Y[r]
    suma_x2 = suma_x2 + X[r]**2

    suma_x_ex = suma_x_ex + X[r]
    suma_y_ex = suma_y_ex + np.log(Y[r])
    suma_xy_ex = suma_xy_ex + X[r] * np.log(Y[r])
    suma_x2_ex = suma_x2_ex + X[r]**2

    suma_x_ra = suma_x_ra + 1/X[r]
    suma_y_ra = suma_y_ra + 1/Y[r]
    suma_xy_ra = suma_xy_ra + 1/X[r] * 1/Y[r]
    suma_x2_ra = suma_x2_ra + (1/X[r])**2

    suma_x_ep = suma_x_ep + math.log10(X[r])
    #suma_x_ep = math.log10(suma_x)
    suma_y_ep = suma_y_ep + math.log10(Y[r])
    #suma_y_ep = math.log10(suma_y)
    suma_xy_ep = suma_xy_ep + math.log10(X[r]) * math.log10(Y[r])
    #suma_xy_ep = suma_x_ep * suma_y_ep
    suma_x2_ep = suma_x2_ep + math.log10(X[r])**2
    #suma_x2_ep = suma_x_ep**2

X_mean_ep = suma_x_ep / n
Y_mean_ep = suma_y_ep / m

X_mean_ex = suma_x_ex / n
Y_mean_ex = suma_y_ex / m

X_mean_ra = suma_x_ra / n
Y_mean_ra = suma_y_ra / m

X_mean = suma_x / n
Y_mean = suma_y / m

a1 = (n*suma_xy-suma_x*suma_y)/(n*suma_x2-suma_x**2)
a0 = Y_mean-(a1*X_mean)

a1_ex = (n*suma_xy_ex-suma_x_ex*suma_y_ex)/(n*suma_x2_ex-suma_x_ex**2)
a0_ex = Y_mean_ex-(a1_ex*X_mean_ex)

a1_ep = (n*suma_xy_ep-suma_x_ep*suma_y_ep)/(n*suma_x2_ep-suma_x_ep**2)
a0_ep = Y_mean_ep-(a1_ep*X_mean_ep)

a1_ra = (n*suma_xy_ra-suma_x_ra*suma_y_ra)/(n*suma_x2_ra-suma_x_ra**2)
a0_ra = Y_mean_ra-(a1_ra*X_mean_ra)

print("a sub zero", a0)
print("a sub 1:", a1)

alpha_ex = math.e**(a0_ex)
beta_ex = a1_ex
print(X)
print ("y=",alpha_ex, "e^", beta_ex,"x")

alpha_ep = 10**(a0_ep)
beta_ep = a1_ep
print(X)
print ("y=",alpha_ep, "x^", beta_ep)

alpha_ra = 1/a0_ra
beta_ra = a1_ra/a0_ra
print(X)
print ("y=",alpha_ra, "x^", beta_ra)

plt.scatter(X, Y)
plt.plot([min(X), max(X)], [a0 + a1*min(X), a0 + a1*max(X)])
plt.show()

li=[]
for i in range(len(X)):
  li.append(alpha_ex*math.e**(beta_ex*X[i]))
plt.scatter(X, Y)
plt.plot(X,li)
plt.show()

r=[]
for i in range(len(X)):
  r.append(alpha_ep*X[i]**(beta_ep))
plt.scatter(X, Y)
plt.plot(X,r)
plt.show()

ra=[]
for i1 in range(len(X)):
  ra.append(alpha_ra*(X[i1]/(beta_ra+X[i1])))
plt.scatter(X, Y)
plt.plot(X,ra)
plt.show()

plt.scatter(X, Y)
plt.plot([min(X), max(X)], [a0 + a1*min(X), a0 + a1*max(X)])
plt.plot(X,li)
plt.plot(X,r)
plt.plot(X,ra)
plt.show()