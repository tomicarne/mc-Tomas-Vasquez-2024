# -*- coding: utf-8 -*-
"""taller 20.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VJeuQ6JM32MFX9yNQ6HlCnuDi8J28yYj
"""

from re import S
import matplotlib.pyplot as plt
import numpy as np
import math
from sklearn.linear_model import LinearRegression
# Create some fake data for two variables: x and y
X = [1, 2, 3, 4, 5, 6, 7]
Y = [0.1, 0.3, 0.9, 1.7, 2.8, 4.5, 6.9]
#X=[1,2,3,4,5,6,7]
#Y=[0.5,2.5,2,4,3.5,6,5.5]

n = len(X)
m = len(Y)
# Plot the data to see the relationship between x and y
plt.scatter(X, Y)
plt.show()
suma_x = suma_y =suma_xy= suma_x2 = Sy= St= sr= Syx= 0
for i in range(len(X)):
  suma_x = suma_x + X[i]
  suma_y = suma_y + Y[i]
  suma_xy = suma_xy + X[i] * Y[i]
  suma_x2 = suma_x2 + X[i]**2

prom_x = suma_x / len(X)
prom_y = suma_y / len(Y)

a1 = (n*suma_xy-suma_x*suma_y)/(n*suma_x2-suma_x**2)
a0 = prom_y-(a1*prom_x)

print("a sub zero", a0)
print("a sub 1:", a1)


for i in range(len(X)):
  St= St + (Y[i]-prom_y)**2
Sy= (St/(len(X)-1))**0.5


print(St)
print("desviasion estandar",Sy)

#coeficientes
for i in range(len(X)):
  sr=sr+(Y[i]-a0-(a1*X[i]))**2
Syx= (sr/(len(X)-2))**0.5

print("sy/x: ",Syx)
print("sr : ",sr)

r2=((St-sr)/St)
print("coeficiente de determinacion :",r2)
r=0
r=(((St-sr)/St)**0.5)*100
print("coeficiente de correlacion :",r, "%")

plt.scatter(X, Y)
plt.plot([min(X), max(X)], [a0 + a1*min(X), a0 + a1*max(X)])

