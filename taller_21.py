# -*- coding: utf-8 -*-
"""taller 21.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1G-UcVF0Z-MoxMriA7OTPk-x_dxaO1ngp
"""

import copy
from re import S
import matplotlib.pyplot as plt
import numpy as np
import math
from sklearn.linear_model import LinearRegression
def imprimirSistema(a, b, etiqueta):
    n = len(b)
    print(etiqueta)
    for i in range(n):
        for j in range(n):
            print(a[i][j], end = " ")
        print("|", b[i])
    print()

def gaussJordan(ao, bo):
    a = copy.deepcopy(ao)
    b = copy.copy(bo)
    temp = []
    zer = 0
    n = len(b)

    for i in range(n):
        if a[i][i] == 0:
            for k in range(i+1,n):
                if a[k][i] != 0:
                    a[i], a[k] = a[k] , a[i]
                    b[i], b[k] = b[k] , b[i]
                    break
        pivote = a[i][i]
        #Dividir por el pivote
        for j in range(n):
            a[i][j] /= pivote
        b[i] /= pivote


        #Reducci√≥n
        for k in range(n):
            if i != k:
                #Se reduce
                valorAux = -a[k][i]
                for j in range(n):
                    a[k][j] += a[i][j] * valorAux
                b[k] += b[i] * valorAux


    return b







# Create some fake data for two variables: x and y
X = [1, 3, 5, 7, 9, 11, 13]
Y = [7.4, 1.8, -1, -1.8, -1.2, 2.2, 7.2]
#X = [0, 1, 2, 3, 4, 5]
#Y = [0.5, 0.5, 1.3, 2.4, 3.6, 6.5]
sum_x = sum_y= sum_x2 = sum_x3 =sum_x4= sum_xy = sum_x2y =0
for r in range(len(X)):
  sum_x = sum_x + X[r]
  sum_y = sum_y + Y[r]
  sum_x2 = sum_x2 + X[r]**2
  sum_x3 = sum_x3 + X[r]**3
  sum_x4 = sum_x4 + X[r]**4
  sum_xy = sum_xy + (X[r]*Y[r])
  sum_x2y = sum_x2y + ((X[r]**2)*Y[r])
a = [[len(X), sum_x, sum_x2], [sum_x, sum_x2, sum_x3], [sum_x2, sum_x3, sum_x4]]
b = [sum_y, sum_xy, sum_x2y]
prom_y = sum_y / len(Y)
c = gaussJordan(a, b)
print("Respuesta:")
for i in range(len(x)):
    print("a" + str(i), "=", c[i])
a0 = c[0]
a1 = c[1]
a2 = c[2]
Sr = St= 0
for r in range(len(X)):
  Sr =Sr + (Y[r] - a0 - a1*X[r] -(a2*X[r]**2))**2
  St =St + (Y[r]-prom_y)**2
print("Sr",Sr)
print("St",St)

rc= (((St-Sr)/St)**0.5)*100
print( "rc" , rc)
i = []
for r in range(len(X)):
  i.append(a0 +(a1*X[r])+(a2*(X[r])**2))

plt.scatter(X, Y)
plt.plot(X,i)
plt.show